@page "/registrovacuna"
@using Registro_Vacunacion_EQNuGet.Data
@using Registro_Vacunacion_EQNuGet.Models
@inject NavigationManager NavManager

<h1>Registro de Vacuna</h1>

<EditForm Model="persona" OnValidSubmit="SubmitForm">

    <DataAnnotationsValidator />

    <div class="container-fluid">

        <div class="row">

            <div class="col-lg-4 col-sm-6 col-xs-12">

                <label class="form-label">C&eacute;dula</label>
                <div class="input-group mb-3">
                    <InputText @bind-Value="persona.Cedula" class="form-control w-120" @onfocusout="GetPersonaByCedula" />
                </div>

                <label class="form-label">Nombre</label>
                <div class="input-group mb-3">
                    <InputText @bind-Value="persona.Nombre" class="form-control" disabled="@(FoundOnDB || FoundOnAPI)" />
                </div>

                <label class="form-label">Apellido</label>
                <div class="input-group  mb-3">
                    <InputText @bind-Value="persona.Apellido" class="form-control" disabled="@(FoundOnDB || FoundOnAPI)" />
                </div>

            </div>

            <div class="col-lg-4 col-sm-6 col-xs-12">

                <label class="form-label">Tel&eacute;fono</label>
                <div class="input-group mb-3 ">
                    <InputText @bind-Value="persona.Telefono" class="form-control" disabled="@FoundOnDB" />
                </div>

                <label class="form-label">Fecha de Nacimiento</label>
                <div class="input-group mb-3">
                    <InputDate @bind-Value="persona.FechaNacimiento" class="form-control" disabled="@(FoundOnDB || FoundOnAPI)" />
                </div>

                <label class="form-label">Provincia</label>
                <div class="input-group mb-3">
                    <InputSelect @bind-Value="persona.Provincia" class="form-control" disabled="@FoundOnDB">
                        @foreach (var provincia in new sistemavacunacionContext().Provincias.OrderBy(p => p.Nombre))
                        {
                            <option value="@provincia.Id">@provincia.Nombre</option>
                        }
                    </InputSelect>
                </div>

            </div>

            <div class="col-lg-4 col-xs-12">

                <label class="form-label">Vacuna Recibida</label>
                <div class="input-group mb-3">
                    <InputSelect @bind-Value="persona.VacunaRecibida" class="form-control" disabled="@(FoundOnDB && persona.VacunaRecibida.HasValue && persona.VacunaRecibida != 0)">
                        @foreach (var vacuna in new sistemavacunacionContext().Vacunas.Where(v => v.Cantidad > 0).OrderBy(v => v.Marca))
                        {
                            <option value="@vacuna.Id">@vacuna.Marca (@vacuna.Cantidad.ToString("N0"))</option>
                        }
                    </InputSelect>
                </div>

                <label class="form-label">Fecha de la Primera Dosis</label>
                <div class="input-group mb-3">
                    <InputDate @bind-Value="persona.FechaPrimeraDosis" class="form-control" disabled="@(FoundOnDB && persona.FechaPrimeraDosis.HasValue)" />
                </div>

                <label class="form-label">Fecha de la Segunda Dosis</label>
                <div class="input-group mb-3">
                    <InputDate @bind-Value="persona.FechaSegundaDosis" class="form-control" disabled="@(FoundOnDB && persona.FechaSegundaDosis.HasValue)" />
                </div>

            </div>

        </div>

        <div class="row">
            <button type="submit" class="btn btn-success mx-auto">Agregar / Actualizar</button>
        </div>

    </div>

</EditForm>

@code {
    Personas persona = new();

    CedulaAPI cedulaAPI = new() { Ok = true };

    bool FoundOnDB;
    bool FoundOnAPI;

    async void SubmitForm()
    {
        using sistemavacunacionContext db = new();

        var vacunaFromDB = db.Vacunas.Where(v => v.Id == persona.VacunaRecibida).First();

        if (FoundOnDB)
        {
            var personaToSave = db.Personas.Where(p => p.Cedula == persona.Cedula).First();
            var personaFromDB = new sistemavacunacionContext().Personas.Where(p => p.Cedula == persona.Cedula).ToList()[0];

            if (!personaFromDB.FechaSegundaDosis.HasValue || !personaFromDB.VacunaRecibida.HasValue)
            {
                vacunaFromDB.Cantidad--;
                personaToSave.VacunaRecibida = persona.VacunaRecibida;
                personaToSave.FechaPrimeraDosis = persona.FechaPrimeraDosis;
                personaToSave.FechaSegundaDosis = persona.FechaSegundaDosis;
            }
        }
        else if (FoundOnAPI || !FoundOnAPI)
        {
            db.Add(persona);
            vacunaFromDB.Cantidad--;
        }
        else { }

        await db.SaveChangesAsync();

        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    void ResetForm(string cedula = "")
    {
        persona = new()
        {
            Cedula = cedula,
            VacunaRecibida = 0,
            Provincia = 0
        };

        this.StateHasChanged();
    }

    async Task GetPersonaByCedula()
    {
        FoundOnAPI = false;
        FoundOnDB = false;

        if (persona.Cedula.Length == 11)
        {
            var query = new sistemavacunacionContext().Personas.Where(p => p.Cedula == persona.Cedula);

            if (query.Count() == 1)
            {
                persona = query.First();
                persona.VacunaRecibida = persona.VacunaRecibida ?? 0;

                FoundOnDB = true;
                FoundOnAPI = false;
            }

            if (query.Count() == 0)
            {
                cedulaAPI = await CedulaAPI.GetCedula(persona.Cedula);

                if (cedulaAPI.Ok)
                {
                    persona.Nombre = cedulaAPI.Nombres;
                    persona.Apellido = $"{cedulaAPI.Apellido1} {cedulaAPI.Apellido2}";
                    persona.FechaNacimiento = DateTime.Parse(cedulaAPI.FechaNacimiento);
                    FoundOnAPI = true;
                    FoundOnDB = false;
                }
            }

            if (!FoundOnAPI && !FoundOnDB)
            {
                ResetForm(persona.Cedula);
            }
        }

        this.StateHasChanged();
    }

    async protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InvokeAsync(() => ResetForm());
            this.StateHasChanged();
        }
    }
}